openapi: 3.1.0
info:
  version: 1.0.0
  title: Kakapo API
  description: OpenAPI Spec for Kakapo Social.
  x-logo:
    url: https://raw.githubusercontent.com/James11T/kakapo/main/ui/public/banner_with_spacing.png
    altText: Kakapo Social
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
security:
  - authorizationToken: []
servers:
  - url: http://localhost:5000/api/v1
    description: Local Test Deployment.
  - url: https://kakaposocial.com/api/v1
    description: Production Deployment.
  - url: https://beta.kakaposocial.com/api/v1
    description: Pre Production Deployment.
tags:
  - name: authentication
    description: Endpoints for managing authentication through the use of tokens.
    x-displayName: Authentication
  - name: users
    description: Endpoints for fetching, creating and updating users.
    x-displayName: Users
  - name: system
    description: Endpoints for interacting with and reading information from the system.
    x-displayName: System
  - name: placeholder
    description: Endpoints that are not yet documented or implemented.
    x-displayName: placeholder
  - name: status
    description: Endpoints for checking the status of the API.
    x-displayName: Status
  - name: tokens
    description: Endpoints that generate, process and manage tokens.
    x-displayName: Tokens
  - name: user-details
    description: Endpoints that are for managing User instances.
    x-displayName: User Details
  - name: friendships
    description: Endpoints that are for managing user friendships.
    x-displayName: Friendships
  - name: friend-requests
    description: Endpoints that are for managing and sending friend requests.
    x-displayName: Friend Requests
  - name: mfa
    description: Endpoints that are for managing multi-factor authentication.
    x-displayName: MFA
  - name: passwords
    description: Endpoints that are for managing passwords.
    x-displayName: Passwords
  - name: posts
    description: Endpoints that are for managing posts.
    x-displayName: Posts
  - name: post-details
    description: Endpoints that are for managing details of posts.
    x-displayName: Post Details
  - name: comments
    description: Endpoints that are for managing comments on posts.
    x-displayName: Comments
x-tagGroups:
  - name: System
    tags:
      - status
  - name: Authentication
    tags:
      - tokens
      - mfa
      - passwords
  - name: Users
    tags:
      - user-details
      - friendships
      - friend-requests
  - name: Posts
    tags:
      - post-details
      - comments
paths:
  /status:
    get:
      operationId: get-api-status
      summary: API server status
      description: Get the current API server status.
      tags:
        - system
        - status
      responses:
        '200':
          description: API status returned.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/prodStatusResponseBody'
                  - $ref: '#/components/schemas/devStatusResponseBody'
  /tokens/authenticate:
    post:
      operationId: authenticate-email-and-password
      summary: Authenticate with email and password
      description: Generate an access and refresh token pair from credentials, can return MFA challenges if needed.
      tags:
        - authentication
        - tokens
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/credentials'
                - $ref: '#/components/schemas/credentialsWithMfa'
      responses:
        '200':
          description: Correct credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tokenPair'
        '401':
          description: Indicates that either the credentials are incorrect or that MFA is required.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/mfaRequiredResponseBody'
                  - $ref: '#/components/schemas/invalidCredentialsResponseBody'
  /tokens/refresh:
    post:
      operationId: refresh-access-token
      summary: Refresh an access token
      description: Generate a new access token from a given refresh token, may also create a new refresh token.
      tags:
        - authentication
        - tokens
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/refreshPayload'
      responses:
        '200':
          description: Successful refresh.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tokenPair'
        '401':
          description: Expired or invalid refresh token.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/invalidRefreshTokenResponseBody'
                  - $ref: '#/components/schemas/expiredRefreshTokenResponseBody'
  /users:
    get:
      operationId: query-users
      summary: Query Users
      description: Search for users based on various query parameters.
      tags:
        - users
        - user-details
      parameters:
        - $ref: '#/components/parameters/pagination-from'
        - $ref: '#/components/parameters/pagination-count'
        - name: username
          in: query
          description: Username to query by.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Users returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/user'
    post:
      operationId: create-user
      summary: Create a User
      description: Create a new user, intended to be used by the end client.
      tags:
        - users
        - user-details
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createUserBody'
      responses:
        '200':
          description: Successful Creation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createUserSuccessResponseBody'
        '400':
          description: Invalid parameters passed to create user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/badParametersResponseBody'
                title: Invalid parameters
        '409':
          description: Username or email is already in use.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/usernameReservedResponseBody'
                  - $ref: '#/components/schemas/emailAlreadyInUseResponseBody'
  /users/{username}:
    get:
      operationId: get-individual-user
      summary: Get a User from username
      description: Gets a user from their username.
      tags:
        - users
        - user-details
      parameters:
        - $ref: '#/components/parameters/usernamePathProperty'
      responses:
        '200':
          description: Correct credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '404':
          description: No user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userNotFoundResponseBody'
  /users/{username}/is-available:
    get:
      operationId: is-username-available
      summary: Is username available?
      description: Returns true if the given username is not taken by an existing user or reserved by the system.
      tags:
        - users
        - user-details
      parameters:
        - name: username
          in: path
          description: Username of the user to retrieve.
          required: true
          schema:
            type: string
            maxLength: 32
      responses:
        '200':
          description: Successful check.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/usernameAvailabilityResponseBody'
  /users/{username}/friends:
    get:
      operationId: get-users-friends
      summary: Get friends
      description: Get all friends of a given user via username.
      tags:
        - users
        - friendships
      parameters:
        - $ref: '#/components/parameters/pagination-from'
        - $ref: '#/components/parameters/pagination-count'
        - name: username
          in: path
          description: Username of the user for whom friend requests will be retrieved.
          required: true
          schema:
            type: string
            maxLength: 32
      responses:
        '200':
          description: Friends returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/friend'
        '404':
          description: No user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userNotFoundResponseBody'
  /users/{username}/friends/{friendUsername}:
    delete:
      operationId: remove-users-friend
      summary: Remove friend
      description: Remove a given user from a given users friends list.
      tags:
        - users
        - friendships
      parameters:
        - $ref: '#/components/parameters/usernamePathProperty'
        - name: friendUsername
          in: path
          description: Username of the user to remove from the friend list of the given user.
          required: true
          schema:
            type: string
            maxLength: 32
      responses:
        '204':
          description: Friend successfully removed.
        '400':
          description: Not friends.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notFriendsResponseBody'
        '404':
          description: No user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userNotFoundResponseBody'
  /users/{username}/friend-requests:
    get:
      operationId: get-users-friend-requests
      summary: Get friend requests
      description: Get all pending friend requests from a given username, can be incoming or outgoing.
      tags:
        - users
        - friend-requests
      parameters:
        - $ref: '#/components/parameters/pagination-from'
        - $ref: '#/components/parameters/pagination-count'
        - $ref: '#/components/parameters/usernamePathProperty'
        - name: direction
          in: query
          description: Incoming or outgoing.
          required: false
          schema:
            type: string
            example: incoming
            default: incoming
            enum:
              - incoming
              - outgoing
      responses:
        '200':
          description: Friend requests returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/friendRequest'
        '404':
          description: No user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userNotFoundResponseBody'
    post:
      operationId: send-friend-request
      summary: Send friend request
      description: Send a friend request from the authenticated user to the specified user.
      tags:
        - users
        - friend-requests
      parameters:
        - $ref: '#/components/parameters/usernamePathProperty'
      responses:
        '200':
          description: Friend request sent successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sendFriendRequestSuccessResponseBody'
        '404':
          description: No user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userNotFoundResponseBody'
        '409':
          description: Already a pending friend request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/existingFriendRequestResponseBody'
  /auth/mfa:
    get:
      operationId: get-mfa-status
      summary: Get MFA status
      description: Get the MFA status of the currently authenticated user.
      tags:
        - auth
        - mfa
      responses:
        '200':
          description: MFA status returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mfaStatusResponseBody'
    post:
      operationId: add-mfa-source
      summary: Add MFA source
      description: Add a new authenticator app source.
      tags:
        - auth
        - mfa
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/addMfaSourceBody'
      responses:
        '200':
          description: MFA source added successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/addMfaSourceResponseBody'
        '400':
          description: Bad parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/badParametersResponseBody'
                title: Invalid parameters
  /auth/mfa/{mfaId}:
    patch:
      operationId: activate-mfa-source
      summary: Activate MFA source
      description: Activate an MFA source by providing a generated key.
      tags:
        - auth
        - mfa
      parameters:
        - $ref: '#/components/parameters/mfaIdPathProperty'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/mfaCodeBody'
      responses:
        '204':
          description: Successfully activated MFA source.
        '404':
          description: MFA source not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mfaSourceNotFoundResponseBody'
    delete:
      operationId: remove-mfa-source
      summary: Remove MFA source
      description: Remove an active or inactive MFA source from the currently authenticated user.
      tags:
        - auth
        - mfa
      parameters:
        - $ref: '#/components/parameters/mfaIdPathProperty'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/mfaCodeBody'
      responses:
        '204':
          description: Successfully removed MFA source.
        '404':
          description: MFA source not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mfaSourceNotFoundResponseBody'
  /auth/request-password-reset:
    post:
      operationId: invoke-password-reset
      summary: Request password reset
      description: Send a password reset email to a given email address if a user is tied to that email.
      tags:
        - auth
        - passwords
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  $ref: '#/components/schemas/email'
      responses:
        '204':
          description: Always returned, whether an account is linked to the email given or not.
  /auth/reset-password:
    post:
      operationId: reset-password
      summary: Reset password
      description: Reset the password of a user from a reset token provided by invoking a password reset email.
      tags:
        - auth
        - passwords
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                resetToken:
                  $ref: '#/components/schemas/jwt'
                password:
                  $ref: '#/components/schemas/password'
      responses:
        '204':
          description: Password reset successfully.
        '400':
          description: Failed to change password, either token is invalid or password does not meet requirements.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/invalidResetTokenResponseBody'
                  - $ref: '#/components/schemas/badParametersResponseBody'
                    title: Invalid Password
  /auth/whoami:
    get:
      operationId: whoami
      summary: Who am I?
      description: Return the details of the currently authenticated user.
      tags:
        - auth
        - user-details
      responses:
        '200':
          description: User identity returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/extendedUser'
        '401':
          description: Not authenticated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    const: NOT_AUTHENTICATED
                  message:
                    type: string
                    const: You are not currently authenticated.
  /posts:
    get:
      operationId: query-posts
      summary: Query posts
      description: Search for posts based on various query parameters.
      tags:
        - posts
        - post-details
      parameters:
        - name: caption
          in: query
          description: Caption content to query by.
          required: false
          schema:
            type: string
            example: Hello World!
        - name: order-by
          in: query
          description: How to order the posts that are returned.
          required: false
          schema:
            type: string
            enum:
              - likes-asc
              - likes-desc
              - posted-asc
              - posted-desc
            example: posted-asc
        - $ref: '#/components/parameters/pagination-from'
        - $ref: '#/components/parameters/pagination-count'
      responses:
        '200':
          description: Posts returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/post'
    post:
      operationId: create-post
      summary: Create post
      description: Create a new post as the currently authenticated user.
      tags:
        - posts
        - post-details
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/createPostBody'
      responses:
        '200':
          description: Post created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/post'
        '400':
          description: Invalid post data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/badParametersResponseBody'
                title: Invalid parameters
  /posts/{postId}:
    get:
      operationId: get-post
      summary: Get post
      description: Get a post by its ID.
      tags:
        - posts
        - post-details
      parameters:
        - $ref: '#/components/parameters/postIdPathProperty'
      responses:
        '200':
          description: Post returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/post'
        '404':
          description: Post not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/postNotFoundResponseBody'
    delete:
      operationId: remove-post
      summary: Remove post
      description: Remove a post based on its ID.
      tags:
        - posts
        - post-details
      parameters:
        - $ref: '#/components/parameters/postIdPathProperty'
      responses:
        '204':
          description: Post removed successfully.
        '404':
          description: Post not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/postNotFoundResponseBody'
    patch:
      operationId: edit-post
      summary: Edit post
      description: Edit a post based on its ID.
      tags:
        - posts
        - post-details
      parameters:
        - $ref: '#/components/parameters/postIdPathProperty'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/editPostBody'
      responses:
        '200':
          description: Post edited successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/post'
        '400':
          description: Invalid post data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/badParametersResponseBody'
                title: Invalid parameters
        '404':
          description: Post not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/postNotFoundResponseBody'
  /posts/{postId}/likes:
    get:
      operationId: get-like-count
      summary: Get like count
      description: Get the number of likes on a given post.
      tags:
        - posts
        - post-details
        - post-likes
      parameters:
        - $ref: '#/components/parameters/postIdPathProperty'
      responses:
        '200':
          description: Like count returned.
          content:
            application/json:
              schema:
                type: object
                properties:
                  likes:
                    type: number
                    example: 100
        '404':
          description: Post not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/postNotFoundResponseBody'
  /posts/{postId}/comments:
    get:
      operationId: get-comments
      summary: Get comments
      description: Get comments on a post.
      tags:
        - posts
        - comments
      parameters:
        - $ref: '#/components/parameters/postIdPathProperty'
      responses:
        '200':
          description: Comments returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/comment'
        '404':
          description: Post not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/postNotFoundResponseBody'
    post:
      operationId: create-comment
      summary: Create comment
      description: Add a new comment to a post as the currently authenticated user.
      tags:
        - posts
        - comments
      parameters:
        - $ref: '#/components/parameters/postIdPathProperty'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createCommentBody'
      responses:
        '200':
          description: Comment created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/comment'
        '400':
          description: Invalid comment data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/badParametersResponseBody'
                title: Invalid parameters
        '404':
          description: Post not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/postNotFoundResponseBody'
  /posts/{postId}/comments/{commentId}:
    get:
      operationId: get-comment
      summary: Get comment
      description: Get an individual comment by ID.
      tags:
        - posts
        - comments
      parameters:
        - $ref: '#/components/parameters/postIdPathProperty'
        - $ref: '#/components/parameters/commentIdPathProperty'
      responses:
        '200':
          description: Comment returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/comment'
        '404':
          description: Post or comment not found.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/commentNotFoundResponseBody'
                  - $ref: '#/components/schemas/postNotFoundResponseBody'
    delete:
      operationId: delete-comment
      summary: Delete comment
      description: Delete a comment by ID.
      tags:
        - posts
        - comments
      parameters:
        - $ref: '#/components/parameters/postIdPathProperty'
        - $ref: '#/components/parameters/commentIdPathProperty'
      responses:
        '204':
          description: Comment successfully deleted.
        '404':
          description: Post or comment not found.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/commentNotFoundResponseBody'
                  - $ref: '#/components/schemas/postNotFoundResponseBody'
    patch:
      operationId: edit-comment
      summary: Edit comment
      description: Update the contents of a comment, setting the edited property of a comment in the process.
      tags:
        - posts
        - comments
      parameters:
        - $ref: '#/components/parameters/postIdPathProperty'
        - $ref: '#/components/parameters/commentIdPathProperty'
      responses:
        '200':
          description: Comment successfully edited.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/comment'
        '400':
          description: Invalid comment data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/badParametersResponseBody'
                title: Invalid parameters
        '404':
          description: Post or comment not found.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/commentNotFoundResponseBody'
                  - $ref: '#/components/schemas/postNotFoundResponseBody'
  /posts/{postId}/comments/{commentId}/likes:
    get:
      operationId: get-comment-likes
      summary: Get comment like count
      description: Get the number of likes a given comment has.
      tags:
        - posts
        - comments
        - comment-likes
      parameters:
        - $ref: '#/components/parameters/postIdPathProperty'
        - $ref: '#/components/parameters/commentIdPathProperty'
      responses:
        '200':
          description: Comment likes returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/commentLikeCountResponseBody'
        '404':
          description: Post or comment not found.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/commentNotFoundResponseBody'
                  - $ref: '#/components/schemas/postNotFoundResponseBody'
    post:
      operationId: like-comment
      summary: Like a comment
      description: Like a comment based on ID.
      tags:
        - posts
        - comments
        - comment-likes
      parameters:
        - $ref: '#/components/parameters/postIdPathProperty'
        - $ref: '#/components/parameters/commentIdPathProperty'
      responses:
        '200':
          description: Comment liked successfully.
        '404':
          description: Post or comment not found.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/commentNotFoundResponseBody'
                  - $ref: '#/components/schemas/postNotFoundResponseBody'
    delete:
      operationId: unlike-comment
      summary: Unlike a comment
      description: Remove a like from a comment based on comment ID.
      tags:
        - posts
        - comments
        - comment-likes
      parameters:
        - $ref: '#/components/parameters/postIdPathProperty'
        - $ref: '#/components/parameters/commentIdPathProperty'
      responses:
        '200':
          description: Comment like removed successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/commentLikeCountResponseBody'
        '400':
          description: Not liked.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/commentNotLikedResponseBody'
        '404':
          description: Post or comment not found.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/commentNotFoundResponseBody'
                  - $ref: '#/components/schemas/postNotFoundResponseBody'
components:
  securitySchemes:
    authorizationToken:
      type: apiKey
      name: Authorization
      in: header
      x-displayName: Authorization Token
  schemas:
    prodStatusResponseBody:
      title: Production status
      type: object
      properties:
        status:
          type: string
          example: ONLINE
        version:
          type: string
          example: 1.0.0
        country:
          type: string
          example: GB
    devStatusResponseBody:
      title: Development status
      allOf:
        - $ref: '#/components/schemas/prodStatusResponseBody'
        - type: object
          properties:
            memoryUsage:
              type: string
              example: 50MB
    email:
      type: string
      format: email
      example: johnsmith@example.com
    password:
      type: string
      example: password123
    credentials:
      title: Credentials
      type: object
      properties:
        email:
          $ref: '#/components/schemas/email'
        password:
          $ref: '#/components/schemas/password'
    mfaCode:
      type: string
      example: 123456
    credentialsWithMfa:
      title: Credentials with MFA
      allOf:
        - $ref: '#/components/schemas/credentials'
        - type: object
          properties:
            mfa:
              $ref: '#/components/schemas/mfaCode'
    jwt:
      type: string
      example: IsInR5cCI6IkpXVCJ9.eyJoZWxsbyI6Nn0.p30S-EYe
    date:
      type: string
      format: date-time
      example: '2022-05-30T14:31:25Z'
    tokenPair:
      type: object
      properties:
        accessToken:
          $ref: '#/components/schemas/jwt'
        refreshToken:
          $ref: '#/components/schemas/jwt'
        validUntil:
          $ref: '#/components/schemas/date'
    mfaType:
      type: string
      enum:
        - SMS
        - EMAIL
        - APP
      example: APP
    mfaRequiredResponseBody:
      type: object
      title: MFA required
      properties:
        error:
          type: string
          const: MFA_PENDING
        message:
          type: string
          const: An MFA pin is required
        source:
          $ref: '#/components/schemas/mfaType'
    invalidCredentialsResponseBody:
      type: object
      title: Invalid credentials
      properties:
        error:
          type: string
          const: INVALID_CREDENTIALS
        message:
          type: string
          const: The provided credentials are unknown or incorrect
    refreshPayload:
      type: object
      properties:
        refreshToken:
          $ref: '#/components/schemas/jwt'
    invalidRefreshTokenResponseBody:
      type: object
      title: Invalid refresh token
      properties:
        error:
          type: string
          const: INVALID_REFRESH_TOKEN
        message:
          type: string
          const: The provided token is malformed or invalid
    expiredRefreshTokenResponseBody:
      type: object
      title: Expired refresh token
      properties:
        error:
          type: string
          const: REFRESH_TOKEN_EXPIRED
        message:
          type: string
          const: The provided token is expired
    uuid:
      type: string
      format: uuid
      example: 2c97027a-0d7e-11ec-9a03-0242ac130003
    user:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/uuid'
        username:
          type: string
          maxLength: 32
          example: johndoe
        displayName:
          type: string
          maxLength: 32
          example: John Doe
        avatar:
          type:
            - string
            - null
          format: uri
          maxLength: 255
          example: https://example.com/avatar.jpg
        about:
          type: string
          maxLength: 2000
          example: Lorem ipsum dolor sit amet, consectetur adipiscing elit.
        registeredAt:
          $ref: '#/components/schemas/date'
    createUserBody:
      type: object
      properties:
        email:
          $ref: '#/components/schemas/email'
        username:
          type: string
          example: johnsmith
          maxLength: 32
        password:
          $ref: '#/components/schemas/password'
    createUserSuccessResponseBody:
      type: object
      title: User created
      properties:
        id:
          $ref: '#/components/schemas/uuid'
    zodError:
      type: object
      properties:
        location:
          type: string
          example: body.caption
        message:
          type: string
          example: Expected string to be at most 1024 characters long
        type:
          type: string
          example: too_big
    badParametersResponseBody:
      type: object
      properties:
        error:
          type: string
          const: BAD_PARAMETERS
        message:
          type: string
          example: The provided data was invalid.
        errors:
          type: array
          items:
            $ref: '#/components/schemas/zodError'
    usernameReservedResponseBody:
      type: object
      title: Username reserved
      properties:
        error:
          type: string
          const: USERNAME_RESERVED
        message:
          type: string
          const: The username provided is taken or is reserved
    emailAlreadyInUseResponseBody:
      type: object
      title: Email reserved
      properties:
        error:
          type: string
          const: EMAIL_RESERVED
        message:
          type: string
          const: The email provided is already in use
    userNotFoundResponseBody:
      type: object
      title: User not found
      properties:
        error:
          type: string
          const: USER_NOT_FOUND
        message:
          type: string
          const: No user was found that matches the given criteria
    usernameAvailabilityResponseBody:
      type: object
      title: Username availability
      properties:
        available:
          type: boolean
          example: true
    friend:
      allOf:
        - $ref: '#/components/schemas/user'
        - type: object
          properties:
            becameFriendsAt:
              $ref: '#/components/schemas/date'
    notFriendsResponseBody:
      type: object
      title: Not friends
      properties:
        error:
          type: string
          const: NOT_FRIENDS
        message:
          type: string
          const: This user is not friends with the given user
    friendRequest:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/user'
        sentAt:
          $ref: '#/components/schemas/date'
    sendFriendRequestSuccessResponseBody:
      type: object
      title: Friend request sent
      properties:
        id:
          $ref: '#/components/schemas/uuid'
    existingFriendRequestResponseBody:
      type: object
      title: Already friends
      properties:
        error:
          type: string
          const: EXISTING_FRIEND_REQUEST
        message:
          type: string
          const: You already have a pending friend request with this user
    mfaSource:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/uuid'
        activated:
          type: boolean
          example: true
        name:
          type: string
          example: iPhone 10
    mfaStatusResponseBody:
      type: object
      title: MFA status
      properties:
        anyActive:
          type: boolean
          example: true
        sources:
          type: array
          items:
            $ref: '#/components/schemas/mfaSource'
    addMfaSourceBody:
      type: object
      properties:
        name:
          type: string
          example: Authy
    base64:
      type: string
      format: base64
      example: aGVsbG8gd29ybGQ=
    base32:
      type: string
      format: base64
      example: NBSWY3DPEB3W64TMMQ======
    addMfaSourceResponseBody:
      type: object
      title: MFA status added
      properties:
        qr:
          $ref: '#/components/schemas/base64'
        secret:
          $ref: '#/components/schemas/base32'
        id:
          $ref: '#/components/schemas/uuid'
    mfaCodeBody:
      type: object
      properties:
        totp:
          $ref: '#/components/schemas/mfaCode'
    mfaSourceNotFoundResponseBody:
      type: object
      title: MFA source not found
      properties:
        error:
          type: string
          const: SOURCE_NOT_FOUND
        message:
          type: string
          const: No MFA source was found that matches the given criteria.
    invalidResetTokenResponseBody:
      type: object
      title: Invalid reset token
      properties:
        error:
          type: string
          const: INVALID_RESET_TOKEN
        message:
          type: string
          const: The provided password reset token was invalid.
    extendedUser:
      allOf:
        - $ref: '#/components/schemas/user'
        - type: object
          properties:
            email:
              $ref: '#/components/schemas/email'
            emailVerified:
              type: boolean
              example: true
    media:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/uuid'
        url:
          type: string
          maxLength: 256
          example: https://example.com/image.jpg
          format: uri
        type:
          type: string
          enum:
            - image
            - video
          example: image
        index:
          type: integer
          example: 0
    post:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/uuid'
        caption:
          type: string
          example: Hello World!
          maxLength: 400
        postedAt:
          $ref: '#/components/schemas/date'
        author:
          $ref: '#/components/schemas/user'
        media:
          type: array
          items:
            $ref: '#/components/schemas/media'
    createPostBody:
      type: object
      properties:
        caption:
          type: string
          maxLength: 1024
          example: Hello World!
        files:
          type: array
          items:
            type: string
            format: binary
    postNotFoundResponseBody:
      type: object
      title: Post not found
      properties:
        error:
          type: string
          const: POST_NOT_FOUND
        message:
          type: string
          const: No post was found that matches the given criteria.
    editPostBody:
      type: object
      properties:
        caption:
          type:
            - string
            - null
          maxLength: 1024
          example: Hello World!
    comment:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/uuid'
        text:
          type: string
          maxLength: 1024
          example: Hello World!
        edited:
          type: boolean
          example: false
        postedAt:
          $ref: '#/components/schemas/date'
        author:
          $ref: '#/components/schemas/user'
        post:
          $ref: '#/components/schemas/post'
    text:
      type: string
      maxLength: 1024
      example: Hello World!
    createCommentBody:
      type: object
      properties:
        text:
          $ref: '#/components/schemas/text'
    commentNotFoundResponseBody:
      type: object
      title: Comment not found
      properties:
        error:
          type: string
          const: COMMENT_NOT_FOUND
        message:
          type: string
          const: No comment was found that matches the given criteria.
    commentLikeCountResponseBody:
      type: object
      title: Comment like count
      properties:
        likes:
          type: number
          example: 10
    commentNotLikedResponseBody:
      type: object
      title: Comment not liked
      properties:
        error:
          type: string
          const: NOT_LIKED
        message:
          type: string
          const: You have not liked this comment.
  parameters:
    pagination-from:
      in: query
      name: from
      schema:
        type: integer
        minimum: 0
      description: Where to start query from.
    pagination-count:
      in: query
      name: count
      schema:
        type: integer
        minimum: 1
      description: Maximum amount of results to return.
    usernamePathProperty:
      name: username
      in: path
      description: Username of the user to perform the operation on.
      required: true
      schema:
        type: string
        maxLength: 32
    mfaIdPathProperty:
      name: mfaId
      in: path
      description: ID of the MFA source to perform the operation on.
      required: true
      schema:
        $ref: '#/components/schemas/uuid'
    postIdPathProperty:
      name: postId
      in: path
      description: ID of the post to perform the operation on.
      required: true
      schema:
        $ref: '#/components/schemas/uuid'
    commentIdPathProperty:
      name: commentId
      in: path
      description: ID of the comment to perform the operation on.
      required: true
      schema:
        $ref: '#/components/schemas/uuid'
