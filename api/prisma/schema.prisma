generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Comment {
  id       Int      @id @default(autoincrement()) @map("comment_id")
  uuid     String   @unique @map("comment_uuid") @db.VarChar(21)
  text     String   @db.VarChar(1024)
  edited   Boolean  @default(false)
  postedAt DateTime @map("posted_at")
  authorId Int      @map("author_id")
  postId   Int      @map("post_id")

  author User          @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  post   Post          @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  likes  CommentLike[]

  @@index([authorId])
  @@index([postId])
  @@map("comment")
}

model CommentLike {
  commentId Int      @map("comment_id")
  userId    Int      @map("user_id")
  likedAt   DateTime @map("liked_at")

  post Comment @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([commentId, userId])
  @@map("comment_like")
}

model FriendRequest {
  userFromId Int      @map("user_from_id")
  userToId   Int      @map("user_to_id")
  sentAt     DateTime @map("sent_at")
  uuid       String   @unique @map("friend_request_uuid") @db.VarChar(21)

  userFrom User @relation("userFrom", fields: [userFromId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userTo   User @relation("userTo", fields: [userToId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([userFromId, userToId])
  @@map("friend_request")
}

model Friendship {
  user1Id         Int      @map("user_1_id")
  user2Id         Int      @map("user_2_id")
  becameFriendsAt DateTime @map("became_friends_at")

  user1 User @relation("user1", fields: [user1Id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user2 User @relation("user2", fields: [user2Id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([user1Id, user2Id])
  @@map("friendship")
}

model Post {
  id        Int      @id @default(autoincrement()) @map("post_id")
  uuid      String   @unique @map("post_uuid") @db.VarChar(21)
  caption   String   @db.VarChar(400)
  postedAt  DateTime @map("posted_at")
  authorId  Int      @map("author_id")
  processed Boolean  @default(false)
  edited    Boolean  @default(false)

  comments Comment[]
  author   User        @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  media    PostMedia[]
  likes    PostLike[]

  @@index([authorId])
  @@map("post")
}

model PostLike {
  postId  Int      @map("post_id")
  userId  Int      @map("user_id")
  likedAt DateTime @map("liked_at")

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([postId, userId])
  @@map("post_like")
}

model PostMedia {
  id         Int     @id @default(autoincrement()) @map("post_media_id")
  uuid       String  @unique @map("post_media_uuid") @db.VarChar(21)
  url        String  @db.VarChar(256)
  type       String  @db.VarChar(32)
  index      Int
  observed   Boolean @default(false)
  restricted Boolean @default(false)
  blocked    Boolean @default(false)
  postId     Int     @map("post_id")

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([postId])
  @@map("post_media")
}

model User {
  id           Int      @id @default(autoincrement()) @map("user_id")
  uuid         String   @unique @map("user_uuid") @db.VarChar(36)
  username     String   @unique @db.VarChar(32)
  displayName  String   @map("display_name") @db.VarChar(32)
  avatar       String?  @db.VarChar(255)
  about        String   @default("") @db.VarChar(2000)
  email        String   @unique @db.VarChar(255)
  registeredAt DateTime @map("registered_at")
  initiated    Boolean  @default(false) @map("initiated")

  comments               Comment[]
  incomingFriendRequests FriendRequest[] @relation("userTo")
  outgoingFriendRequests FriendRequest[] @relation("userFrom")
  friendships1           Friendship[]    @relation("user1")
  friendships2           Friendship[]    @relation("user2")
  posts                  Post[]
  postLikes              PostLike[]
  commentLikes           CommentLike[]

  @@map("user")
}
