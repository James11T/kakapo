generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Comment {
  id       Int      @id @default(autoincrement()) @map("comment_id")
  uuid     String   @unique @map("comment_uuid") @db.VarChar(36)
  text     String   @db.VarChar(1024)
  postedAt DateTime @map("posted_at")
  authorId Int      @map("author_id")
  postId   Int      @map("post_id")
  author   User     @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  post     Post     @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([authorId])
  @@index([postId])
  @@map("comment")
}

model FriendRequest {
  userFromId Int      @map("user_from_id")
  userToId   Int      @map("user_to_id")
  sentAt     DateTime @map("sent_at")
  userFrom   User     @relation("userFrom", fields: [userFromId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userTo     User     @relation("userTo", fields: [userToId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([userFromId, userToId])
  @@map("friend_request")
}

model Friendship {
  user1Id         Int      @map("user_1_id")
  user2Id         Int      @map("user_2_id")
  becameFriendsAt DateTime @map("became_friends_at")
  user1           User     @relation("user1", fields: [user1Id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user2           User     @relation("user2", fields: [user2Id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([user1Id, user2Id])
  @@map("friendship")
}

model Post {
  id       Int         @id @default(autoincrement()) @map("post_id")
  uuid     String      @unique @map("post_uuid") @db.VarChar(36)
  caption  String      @db.VarChar(400)
  postedAt DateTime    @map("posted_at")
  authorId Int         @map("author_id")
  comments Comment[]
  author   User        @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  media    PostMedia[]

  @@index([authorId])
  @@map("post")
}

model PostMedia {
  id     Int    @id @default(autoincrement()) @map("post_media_id")
  uuid   String @unique @map("post_media_uuid") @db.VarChar(36)
  url    String @db.VarChar(256)
  type   String @db.VarChar(32)
  index  Int
  postId Int    @map("post_id")
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([postId])
  @@map("post_media")
}

model RefreshToken {
  id         Int      @id @default(autoincrement()) @map("refresh_token_id")
  uuid       String   @unique @map("refresh_token_uuid") @db.VarChar(36)
  subjectId  Int      @map("subject_id")
  expiresAt  DateTime @map("expires_at")
  issuedAt   DateTime @map("issued_at")
  deviceType String   @default("unknown") @map("device_type") @db.VarChar(64)
  sourceIp   String   @map("source_ip") @db.VarChar(39)
  isRevoked  Boolean  @default(false) @map("is_revoked")
  user       User     @relation(fields: [subjectId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([subjectId])
  @@map("refresh_token")
}

model User {
  id                     Int             @id @default(autoincrement()) @map("user_id")
  uuid                   String          @unique @map("user_uuid") @db.VarChar(36)
  username               String          @unique() @db.VarChar(32)
  displayName            String          @map("display_name") @db.VarChar(32)
  avatar                 String?         @db.VarChar(255)
  about                  String          @default("") @db.VarChar(2000)
  email                  String          @unique() @db.VarChar(255)
  emailVerified          Boolean         @default(false) @map("email_verified")
  registeredAt           DateTime        @map("registered_at")
  passwordHash           String          @map("password_hash") @db.VarChar(255)
  comments               Comment[]
  incomingFriendRequests FriendRequest[] @relation("userTo")
  outgoingFriendRequests FriendRequest[] @relation("userFrom")
  friendships1           Friendship[]    @relation("user1")
  friendships2           Friendship[]    @relation("user2")
  posts                  Post[]
  refreshTokens          RefreshToken[]
  userTotps              UserTOTP[]

  @@map("user")
}

model UserTOTP {
  id        Int     @id @default(autoincrement()) @map("user_totp_id")
  uuid      String  @unique @map("user_totp_uuid") @db.VarChar(36)
  name      String  @db.VarChar(32)
  activated Boolean @default(false)
  secret    String  @db.VarChar(128)
  userId    Int     @map("user_id")
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([userId])
  @@map("user_totp")
}
