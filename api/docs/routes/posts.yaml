posts:
  get:
    operationId: query-posts
    summary: Query posts
    description: Search for posts based on various query parameters.
    tags:
      - posts
      - post-details
    parameters:
      - name: caption
        in: query
        description: Caption content to query by.
        required: false
        schema:
          type: string
          example: Hello World!
      - name: order-by
        in: query
        description: How to order the posts that are returned.
        required: false
        schema:
          type: string
          enum:
            - likes-asc
            - likes-desc
            - posted-asc
            - posted-desc
          example: posted-asc
      - $ref: "../schemas/generic.yaml#/components/pagination-from"
      - $ref: "../schemas/generic.yaml#/components/pagination-count"
    responses:
      "200":
        description: Posts returned.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "../schemas/posts.yaml#/components/post"
  post:
    operationId: create-post
    summary: Create post
    description: Create a new post as the currently authenticated user.
    tags:
      - posts
      - post-details
    requestBody:
      required: true
      content:
        multipart/form-data:
          schema:
            $ref: "../schemas/posts.yaml#/components/createPostBody"
    responses:
      "200":
        description: Post created successfully.
        content:
          application/json:
            schema:
              $ref: "../schemas/posts.yaml#/components/post"
      "400":
        description: Invalid post data.
        content:
          application/json:
            schema:
              $ref: "../schemas/generic.yaml#/components/badParametersResponse"
              title: Invalid parameters

post:
  get:
    operationId: get-post
    summary: Get post
    description: Get a post by its ID.
    tags:
      - posts
      - post-details
    parameters:
      - $ref: "../schemas/posts.yaml#/components/postIdPathProperty"
    responses:
      "200":
        description: Post returned.
        content:
          application/json:
            schema:
              $ref: "../schemas/posts.yaml#/components/post"
      "404":
        description: Post not found.
        content:
          application/json:
            schema:
              $ref: "../schemas/posts.yaml#/components/postNotFoundResponse"
  delete:
    operationId: remove-post
    summary: Remove post
    description: Remove a post based on its ID.
    tags:
      - posts
      - post-details
    parameters:
      - $ref: "../schemas/posts.yaml#/components/postIdPathProperty"
    responses:
      "204":
        description: Post removed successfully.
      "404":
        description: Post not found.
        content:
          application/json:
            schema:
              $ref: "../schemas/posts.yaml#/components/postNotFoundResponse"
  patch:
    operationId: edit-post
    summary: Edit post
    description: Edit a post based on its ID.
    tags:
      - posts
      - post-details
    parameters:
      - $ref: "../schemas/posts.yaml#/components/postIdPathProperty"
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: "../schemas/posts.yaml#/components/editPostBody"
    responses:
      "200":
        description: Post edited successfully.
        content:
          application/json:
            schema:
              $ref: "../schemas/posts.yaml#/components/post"
      "400":
        description: Invalid post data.
        content:
          application/json:
            schema:
              $ref: "../schemas/generic.yaml#/components/badParametersResponse"
              title: Invalid parameters
      "404":
        description: Post not found.
        content:
          application/json:
            schema:
              $ref: "../schemas/posts.yaml#/components/postNotFoundResponse"

likes:
  get:
    operationId: get-like-count
    summary: Get like count
    description: Get the number of likes on a given post.
    tags:
      - posts
      - post-details
      - post-likes
    parameters:
      - $ref: "../schemas/posts.yaml#/components/postIdPathProperty"
    responses:
      "200":
        description: Like count returned.
        content:
          application/json:
            schema:
              type: object
              properties:
                likes:
                  type: number
                  example: 100
      "404":
        description: Post not found.
        content:
          application/json:
            schema:
              $ref: "../schemas/posts.yaml#/components/postNotFoundResponse"
